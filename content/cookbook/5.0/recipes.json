{
  "version": "5.0.10-beta",
  "dateUtc": "2023-12-13T14:24:04",
  "recipeCount": 49,
  "jsonSizeKb": 63,
  "chapters": [
    "Quickstart",
    "Introduction",
    "Axis",
    "Plot Types",
    "Statistics"
  ],
  "categories": [
    {
      "chapter": "Quickstart",
      "name": "ScottPlot 5 Quickstart",
      "description": "A survey of basic functionality in ScottPlot 5",
      "url": "/cookbook/5.0/Quickstart"
    },
    {
      "chapter": "Plot Types",
      "name": "Bar Plot",
      "description": "Bar plots represent values as horizontal or vertical rectangles",
      "url": "/cookbook/5.0/Bar"
    },
    {
      "chapter": "Plot Types",
      "name": "Box Plot",
      "description": "Box plots show a distribution at a glance",
      "url": "/cookbook/5.0/Box"
    },
    {
      "chapter": "Plot Types",
      "name": "Error Bars",
      "description": "Error Bars communicate the range of possible values for a measurement",
      "url": "/cookbook/5.0/ErrorBar"
    },
    {
      "chapter": "Plot Types",
      "name": "FillY plot",
      "description": "FillY plots display the vertical range between two Y values at defined X positions",
      "url": "/cookbook/5.0/FillY"
    },
    {
      "chapter": "Plot Types",
      "name": "Financial Plot",
      "description": "Finance plots display price data binned into time ranges",
      "url": "/cookbook/5.0/Finance"
    },
    {
      "chapter": "Plot Types",
      "name": "Polygon Plot",
      "description": "Polygon plots draws a polygon",
      "url": "/cookbook/5.0/Polygon"
    },
    {
      "chapter": "Plot Types",
      "name": "Signal Plot",
      "description": "Signal plots display evenly-spaced data",
      "url": "/cookbook/5.0/Signal"
    },
    {
      "chapter": "Plot Types",
      "name": "Text",
      "description": "Text lables placed on the plot in coordinate space",
      "url": "/cookbook/5.0/Text"
    },
    {
      "chapter": "Statistics",
      "name": "Regression",
      "description": "Statistical operations to fit lines to data",
      "url": "/cookbook/5.0/Regression"
    },
    {
      "chapter": "Introduction",
      "name": "Axis and Ticks",
      "description": "Examples of common customizations for axis labels and ticks",
      "url": "/cookbook/5.0/AxisAndTicks"
    },
    {
      "chapter": "Introduction",
      "name": "Configuring Legends",
      "description": "A legend is a key typically displayed in the corner of a plot",
      "url": "/cookbook/5.0/Legend"
    },
    {
      "chapter": "Introduction",
      "name": "Styling Plots",
      "description": "How to customize plots",
      "url": "/cookbook/5.0/Styling"
    },
    {
      "chapter": "Axis",
      "name": "Customizing Ticks",
      "description": "Advanced customization of tick marks and tick labels",
      "url": "/cookbook/5.0/CustomizingTicks"
    },
    {
      "chapter": "Axis",
      "name": "DateTime Axes",
      "description": "Plot data values on a DataTime axes",
      "url": "/cookbook/5.0/DateTimeAxes"
    },
    {
      "chapter": "Axis",
      "name": "Advanced Axis Features",
      "description": "Tick mark customization and creation of multi-Axis plots",
      "url": "/cookbook/5.0/MultiAxis"
    }
  ],
  "recipes": [
    {
      "categoryClassName": "Quickstart",
      "recipeClassName": "QuickstartScatter",
      "chapter": "Quickstart",
      "category": "ScottPlot 5 Quickstart",
      "name": "Scatter Plot",
      "description": "Display paired X/Y data as a scatter plot.",
      "anchorUrl": "/cookbook/5.0/Quickstart#QuickstartScatter",
      "recipeUrl": "/cookbook/5.0/Quickstart/QuickstartScatter",
      "imageUrl": "/cookbook/5.0/images/QuickstartScatter.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Quickstart/Quickstart.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\ndouble[] dataX = { 1, 2, 3, 4, 5 };\r\ndouble[] dataY = { 1, 4, 9, 16, 25 };\r\nmyPlot.Add.Scatter(dataX, dataY);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Quickstart",
      "recipeClassName": "CustomizingPlottables",
      "chapter": "Quickstart",
      "category": "ScottPlot 5 Quickstart",
      "name": "Customizing Plottables",
      "description": "Functions that add things to plots return the plottables they create. Interact with the properties of plottables to customize their styling and behavior.",
      "anchorUrl": "/cookbook/5.0/Quickstart#CustomizingPlottables",
      "recipeUrl": "/cookbook/5.0/Quickstart/CustomizingPlottables",
      "imageUrl": "/cookbook/5.0/images/CustomizingPlottables.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Quickstart/Quickstart.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\ndouble[] dataX = { 1, 2, 3, 4, 5 };\r\ndouble[] dataY = { 1, 4, 9, 16, 25 };\r\nvar myScatter = myPlot.Add.Scatter(dataX, dataY);\r\nmyScatter.LineStyle.Width = 5;\r\nmyScatter.LineStyle.Color = Colors.Green.WithOpacity(.2);\r\nmyScatter.MarkerStyle.Fill.Color = Colors.Magenta;\r\nmyScatter.MarkerStyle.Size = 15;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Quickstart",
      "recipeClassName": "QuickstartSignal",
      "chapter": "Quickstart",
      "category": "ScottPlot 5 Quickstart",
      "name": "Signal Plot",
      "description": "Signal plots are optimized for displaying evenly spaced data.",
      "anchorUrl": "/cookbook/5.0/Quickstart#QuickstartSignal",
      "recipeUrl": "/cookbook/5.0/Quickstart/QuickstartSignal",
      "imageUrl": "/cookbook/5.0/images/QuickstartSignal.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Quickstart/Quickstart.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\ndouble[] sin = Generate.Sin(51);\r\ndouble[] cos = Generate.Cos(51);\r\nmyPlot.Add.Signal(sin);\r\nmyPlot.Add.Signal(cos);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Quickstart",
      "recipeClassName": "SignalPerformance",
      "chapter": "Quickstart",
      "category": "ScottPlot 5 Quickstart",
      "name": "Signal Plot Performance",
      "description": "Signal plots can interactively display millions of data points in real time. Double-click the plot to display performance benchmarks.",
      "anchorUrl": "/cookbook/5.0/Quickstart#SignalPerformance",
      "recipeUrl": "/cookbook/5.0/Quickstart/SignalPerformance",
      "imageUrl": "/cookbook/5.0/images/SignalPerformance.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Quickstart/Quickstart.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\ndouble[] data = Generate.RandomWalk(1_000_000);\r\nmyPlot.Add.Signal(data);\r\nmyPlot.Title(\u0022Signal plot with one million points\u0022);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Quickstart",
      "recipeClassName": "QuickstartAxisLabels",
      "chapter": "Quickstart",
      "category": "ScottPlot 5 Quickstart",
      "name": "Axis Labels",
      "description": "Axis labels can be extensively customized.",
      "anchorUrl": "/cookbook/5.0/Quickstart#QuickstartAxisLabels",
      "recipeUrl": "/cookbook/5.0/Quickstart/QuickstartAxisLabels",
      "imageUrl": "/cookbook/5.0/images/QuickstartAxisLabels.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Quickstart/Quickstart.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.Add.Signal(Generate.Sin(51));\r\nmyPlot.Add.Signal(Generate.Cos(51));\r\n\r\nmyPlot.XAxis.Label.Text = \u0022Horizonal Axis\u0022;\r\nmyPlot.YAxis.Label.Text = \u0022Vertical Axis\u0022;\r\nmyPlot.TitlePanel.Label.Text = \u0022Plot Title\u0022;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Quickstart",
      "recipeClassName": "Legend",
      "chapter": "Quickstart",
      "category": "ScottPlot 5 Quickstart",
      "name": "Legend",
      "description": "A legend displays plottables in a key along the edge of a plot. Most plottables have a Label property which configures what text appears in the legend.",
      "anchorUrl": "/cookbook/5.0/Quickstart#Legend",
      "recipeUrl": "/cookbook/5.0/Quickstart/Legend",
      "imageUrl": "/cookbook/5.0/images/Legend.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Quickstart/Quickstart.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nvar sig1 = myPlot.Add.Signal(Generate.Sin(51));\r\nsig1.Label = \u0022Sin\u0022;\r\n\r\nvar sig2 = myPlot.Add.Signal(Generate.Cos(51));\r\nsig2.Label = \u0022Cos\u0022;\r\n\r\nmyPlot.Legend.IsVisible = true;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Bar",
      "recipeClassName": "Quickstart",
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Bar Plot Quickstart",
      "description": "Bar plots can be added from a series of values.",
      "anchorUrl": "/cookbook/5.0/Bar#Quickstart",
      "recipeUrl": "/cookbook/5.0/Bar/Quickstart",
      "imageUrl": "/cookbook/5.0/images/Quickstart.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\ndouble[] values = { 5, 10, 7, 13 };\r\nmyPlot.Add.Bars(values);\r\nmyPlot.AutoScale();\r\nmyPlot.SetAxisLimits(bottom: 0);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Bar",
      "recipeClassName": "BarPosition",
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Bar Positioning",
      "description": "The exact position and size of each bar may be customized.",
      "anchorUrl": "/cookbook/5.0/Bar#BarPosition",
      "recipeUrl": "/cookbook/5.0/Bar/BarPosition",
      "imageUrl": "/cookbook/5.0/images/BarPosition.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nList\u003CScottPlot.Bar\u003E bars = new()\r\n{\r\n    new() { Position = 1, Value = 5, ValueBase = 3, },\r\n    new() { Position = 2, Value = 7, ValueBase = 0, },\r\n    new() { Position = 4, Value = 3, ValueBase = 2, },\r\n};\r\n\r\nmyPlot.Add.Bars(bars);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Bar",
      "recipeClassName": "BarWithError",
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Bars with Error",
      "description": "Bars can have errorbars.",
      "anchorUrl": "/cookbook/5.0/Bar#BarWithError",
      "recipeUrl": "/cookbook/5.0/Bar/BarWithError",
      "imageUrl": "/cookbook/5.0/images/BarWithError.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nList\u003CScottPlot.Bar\u003E bars = new()\r\n{\r\n    new() { Position = 1, Value = 5, Error = 1, },\r\n    new() { Position = 2, Value = 7, Error = 2, },\r\n    new() { Position = 3, Value = 6, Error = 1, },\r\n    new() { Position = 4, Value = 8, Error = 2, },\r\n};\r\n\r\nmyPlot.Add.Bars(bars);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Bar",
      "recipeClassName": "BarTickLabels",
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Bars with Labeled Ticks",
      "description": "Bars can be labeled by manually specifying axis tick mark positions and labels.",
      "anchorUrl": "/cookbook/5.0/Bar#BarTickLabels",
      "recipeUrl": "/cookbook/5.0/Bar/BarTickLabels",
      "imageUrl": "/cookbook/5.0/images/BarTickLabels.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.Add.Bar(position: 1, value: 5, error: 1);\r\nmyPlot.Add.Bar(position: 2, value: 7, error: 2);\r\nmyPlot.Add.Bar(position: 3, value: 6, error: 1);\r\nmyPlot.Add.Bar(position: 4, value: 8, error: 2);\r\n\r\nTick[] ticks =\r\n{\r\n    new(1, \u0022Apple\u0022),\r\n    new(2, \u0022Orange\u0022),\r\n    new(3, \u0022Pear\u0022),\r\n    new(4, \u0022Banana\u0022),\r\n};\r\n\r\nmyPlot.BottomAxis.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks);\r\nmyPlot.BottomAxis.MajorTickLength = 0;\r\nmyPlot.DisableGrid();\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Bar",
      "recipeClassName": "BarStackVertically",
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Stacked Bar Plot",
      "description": "Bars can be positioned on top of each other.",
      "anchorUrl": "/cookbook/5.0/Bar#BarStackVertically",
      "recipeUrl": "/cookbook/5.0/Bar/BarStackVertically",
      "imageUrl": "/cookbook/5.0/images/BarStackVertically.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nColor[] colors = {\r\n    myPlot.Palette.GetColor(0),\r\n    myPlot.Palette.GetColor(1),\r\n    myPlot.Palette.GetColor(2),\r\n};\r\n\r\nScottPlot.Bar[] bars =\r\n{\r\n    // first set of stacked bars\r\n    new() { Position = 1, ValueBase = 0, Value = 2, FillColor = colors[0] },\r\n    new() { Position = 1, ValueBase = 2, Value = 5, FillColor = colors[1] },\r\n    new() { Position = 1, ValueBase = 5, Value = 10, FillColor = colors[2] },\r\n\r\n    // second set of stacked bars\r\n    new() { Position = 2, ValueBase = 0, Value = 4, FillColor = colors[0] },\r\n    new() { Position = 2, ValueBase = 4, Value = 7, FillColor = colors[1] },\r\n    new() { Position = 2, ValueBase = 7, Value = 10, FillColor = colors[2] },\r\n};\r\n\r\nmyPlot.Add.Bars(bars);\r\n\r\nTick[] ticks =\r\n{\r\n    new(1, \u0022Spring\u0022),\r\n    new(2, \u0022Summer\u0022),\r\n};\r\n\r\nmyPlot.BottomAxis.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks);\r\nmyPlot.BottomAxis.MajorTickLength = 0;\r\nmyPlot.DisableGrid();\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Bar",
      "recipeClassName": "GroupedBarPlot",
      "chapter": "Plot Types",
      "category": "Bar Plot",
      "name": "Grouped Bar Plot",
      "description": "Bars can be grouped by position and color.",
      "anchorUrl": "/cookbook/5.0/Bar#GroupedBarPlot",
      "recipeUrl": "/cookbook/5.0/Bar/GroupedBarPlot",
      "imageUrl": "/cookbook/5.0/images/GroupedBarPlot.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nColor[] colors = {\r\n    myPlot.Palette.GetColor(0),\r\n    myPlot.Palette.GetColor(1),\r\n    myPlot.Palette.GetColor(2),\r\n};\r\n\r\nScottPlot.Bar[] bars =\r\n{\r\n    // first group\r\n    new() { Position = 1, Value = 2, FillColor = colors[0], Error = 1 },\r\n    new() { Position = 2, Value = 5, FillColor = colors[1], Error = 2 },\r\n    new() { Position = 3, Value = 7, FillColor = colors[2], Error = 1 },\r\n\r\n    // second group\r\n    new() { Position = 5, Value = 4, FillColor = colors[0], Error = 2 },\r\n    new() { Position = 6, Value = 7, FillColor = colors[1], Error = 1 },\r\n    new() { Position = 7, Value = 13, FillColor = colors[2], Error = 3 },\r\n\r\n    // third group\r\n    new() { Position = 9, Value = 5, FillColor = colors[0], Error = 1 },\r\n    new() { Position = 10, Value = 6, FillColor = colors[1], Error = 3 },\r\n    new() { Position = 11, Value = 11, FillColor = colors[2], Error = 2 },\r\n};\r\n\r\nmyPlot.Add.Bars(bars);\r\n\r\n// build the legend manually\r\nmyPlot.Legend.IsVisible = true;\r\nmyPlot.Legend.Alignment = Alignment.UpperLeft;\r\nmyPlot.Legend.ManualItems.Add(new LegendItem() { Label = \u0022Monday\u0022, FillColor = colors[0] });\r\nmyPlot.Legend.ManualItems.Add(new LegendItem() { Label = \u0022Tuesday\u0022, FillColor = colors[1] });\r\nmyPlot.Legend.ManualItems.Add(new LegendItem() { Label = \u0022Wednesday\u0022, FillColor = colors[2] });\r\n\r\n// show group labels on the bottom axis\r\nTick[] ticks =\r\n{\r\n    new(2, \u0022Group 1\u0022),\r\n    new(6, \u0022Group 2\u0022),\r\n    new(10, \u0022Group 3\u0022),\r\n};\r\nmyPlot.BottomAxis.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks);\r\nmyPlot.BottomAxis.MajorTickLength = 0;\r\nmyPlot.DisableGrid();\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Box",
      "recipeClassName": "BoxPlotQuickstart",
      "chapter": "Plot Types",
      "category": "Box Plot",
      "name": "Box Plot Quickstart",
      "description": "Box plots can be added from a series of values.",
      "anchorUrl": "/cookbook/5.0/Box#BoxPlotQuickstart",
      "recipeUrl": "/cookbook/5.0/Box/BoxPlotQuickstart",
      "imageUrl": "/cookbook/5.0/images/BoxPlotQuickstart.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Box.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\n// TODO: move this functionality to the RandomDataGenerator class\r\nRandom rand = new(0);\r\nScottPlot.Plottables.Box CreateRandomBox()\r\n{\r\n    int N = 50;\r\n    double mean = rand.NextDouble() * 3;\r\n    double stdDev = rand.NextDouble() * 3;\r\n\r\n    double[] values = ScottPlot.Generate.RandomNormal(N, mean, stdDev);\r\n    Array.Sort(values);\r\n    double min = values[0];\r\n    double q1 = values[N / 4];\r\n    double median = values[N / 2];\r\n    double q3 = values[3 * N / 4];\r\n    double max = values[N - 1];\r\n\r\n    return new ScottPlot.Plottables.Box\r\n    {\r\n        WhiskerMin = min,\r\n        BoxMin = q1,\r\n        BoxMiddle = median,\r\n        BoxMax = q3,\r\n        WhiskerMax = max,\r\n    };\r\n}\r\n\r\n// TODO: construct 3 boxes manually with hard-coded numerical values for simplicity\r\nList\u003CScottPlot.Plottables.Box\u003E boxes = Enumerable.Range(0, 5)\r\n    .Select(x =\u003E CreateRandomBox())\r\n    .ToList();\r\n\r\nmyPlot.Add.Box(boxes);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Box",
      "recipeClassName": "IndividualBox",
      "chapter": "Plot Types",
      "category": "Box Plot",
      "name": "Individual Box Plots",
      "description": "One can easily create a box plot with only a single box.",
      "anchorUrl": "/cookbook/5.0/Box#IndividualBox",
      "recipeUrl": "/cookbook/5.0/Box/IndividualBox",
      "imageUrl": "/cookbook/5.0/images/IndividualBox.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Box.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nRandom rand = new(0);\r\n\r\nScottPlot.Plottables.Box CreateRandomBox()\r\n{\r\n    int N = 50;\r\n    double mean = rand.NextDouble() * 3;\r\n    double stdDev = rand.NextDouble() * 3;\r\n\r\n    double[] values = ScottPlot.Generate.RandomNormal(N, mean, stdDev);\r\n    Array.Sort(values);\r\n    double min = values[0];\r\n    double q1 = values[N / 4];\r\n    double median = values[N / 2];\r\n    double q3 = values[3 * N / 4];\r\n    double max = values[N - 1];\r\n\r\n    return new ScottPlot.Plottables.Box\r\n    {\r\n        WhiskerMin = min,\r\n        BoxMin = q1,\r\n        BoxMiddle = median,\r\n        BoxMax = q3,\r\n        WhiskerMax = max,\r\n    };\r\n}\r\n\r\n// TODO: construct 3 boxes manually with hard-coded numerical values for simplicity\r\nList\u003CScottPlot.Plottables.Box\u003E boxes = new() { CreateRandomBox() };\r\n\r\nmyPlot.Add.Box(boxes);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Box",
      "recipeClassName": "HorizontalBox",
      "chapter": "Plot Types",
      "category": "Box Plot",
      "name": "Horizontal Box Plots",
      "description": "Box plots can be oriented horizontally, similarly to bar plots.",
      "anchorUrl": "/cookbook/5.0/Box#HorizontalBox",
      "recipeUrl": "/cookbook/5.0/Box/HorizontalBox",
      "imageUrl": "/cookbook/5.0/images/HorizontalBox.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Box.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nRandom rand = new(0);\r\n\r\nScottPlot.Plottables.Box CreateRandomBox()\r\n{\r\n    int N = 50;\r\n    double mean = rand.NextDouble() * 3;\r\n    double stdDev = rand.NextDouble() * 3;\r\n\r\n    double[] values = ScottPlot.Generate.RandomNormal(N, mean, stdDev);\r\n    Array.Sort(values);\r\n    double min = values[0];\r\n    double q1 = values[N / 4];\r\n    double median = values[N / 2];\r\n    double q3 = values[3 * N / 4];\r\n    double max = values[N - 1];\r\n\r\n    return new ScottPlot.Plottables.Box\r\n    {\r\n        WhiskerMin = min,\r\n        BoxMin = q1,\r\n        BoxMiddle = median,\r\n        BoxMax = q3,\r\n        WhiskerMax = max,\r\n    };\r\n}\r\n\r\n// TODO: construct 3 boxes manually with hard-coded numerical values for simplicity\r\nList\u003CScottPlot.Plottables.Box\u003E boxes = Enumerable.Range(0, 5)\r\n    .Select(x =\u003E CreateRandomBox())\r\n    .ToList();\r\n\r\nvar boxPlot = myPlot.Add.Box(boxes);\r\n\r\nboxPlot.Groups.Orientation = Orientation.Horizontal;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Box",
      "recipeClassName": "BoxSeries",
      "chapter": "Plot Types",
      "category": "Box Plot",
      "name": "Box Plot Series",
      "description": "Similarly to bar charts, box plots can be compared across multiple categories.",
      "anchorUrl": "/cookbook/5.0/Box#BoxSeries",
      "recipeUrl": "/cookbook/5.0/Box/BoxSeries",
      "imageUrl": "/cookbook/5.0/images/BoxSeries.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Box.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nRandom rand = new(0);\r\n\r\nScottPlot.Plottables.Box CreateBox()\r\n{\r\n    int N = 50;\r\n    double mean = rand.NextDouble() * 3;\r\n    double stdDev = rand.NextDouble() * 3;\r\n\r\n    double[] values = ScottPlot.Generate.RandomNormal(N, mean, stdDev);\r\n    Array.Sort(values);\r\n    double min = values[0];\r\n    double q1 = values[N / 4];\r\n    double median = values[N / 2];\r\n    double q3 = values[3 * N / 4];\r\n    double max = values[N - 1];\r\n\r\n    return new ScottPlot.Plottables.Box\r\n    {\r\n        WhiskerMin = min,\r\n        BoxMin = q1,\r\n        BoxMiddle = median,\r\n        BoxMax = q3,\r\n        WhiskerMax = max,\r\n    };\r\n}\r\n\r\nint numBoxesPerSeries = 3;\r\nint numSeries = 2;\r\nScottPlot.Plottables.BoxGroup[] series = new ScottPlot.Plottables.BoxGroup[numSeries];\r\nvar colorPalette = new ScottPlot.Palettes.Category10();\r\nfor (int i = 0; i \u003C series.Length; i\u002B\u002B)\r\n{\r\n    series[i] = new ScottPlot.Plottables.BoxGroup\r\n    {\r\n        Fill = new FillStyle\r\n        {\r\n            Color = colorPalette.Colors[i % colorPalette.Colors.Length]\r\n        },\r\n        Boxes = new ScottPlot.Plottables.Box[numBoxesPerSeries],\r\n    };\r\n\r\n    for (int j = 0; j \u003C series[i].Boxes.Count; j\u002B\u002B)\r\n    {\r\n        var box = CreateBox();\r\n        box.Position = j;\r\n        series[i].Boxes[j] = box;\r\n    }\r\n}\r\n\r\nvar boxPlot = myPlot.Add.Box(series);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "ErrorBar",
      "recipeClassName": "ErrorBarQuickstart",
      "chapter": "Plot Types",
      "category": "Error Bars",
      "name": "Error Bar Quickstart",
      "description": "Error Bars go well with scatter plots.",
      "anchorUrl": "/cookbook/5.0/ErrorBar#ErrorBarQuickstart",
      "recipeUrl": "/cookbook/5.0/ErrorBar/ErrorBarQuickstart",
      "imageUrl": "/cookbook/5.0/images/ErrorBarQuickstart.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/ErrorBar.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nint points = 30;\r\n\r\ndouble[] xs = ScottPlot.Generate.Consecutive(points);\r\ndouble[] ys = ScottPlot.Generate.RandomWalk(points);\r\ndouble[] err = ScottPlot.Generate.Random(points, 0.1, 1);\r\n\r\nvar scatter = myPlot.Add.Scatter(xs, ys);\r\nvar errorbars = myPlot.Add.ErrorBar(xs, ys, err);\r\nerrorbars.Color = scatter.Color;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "ErrorBar",
      "recipeClassName": "CustomErrors",
      "chapter": "Plot Types",
      "category": "Error Bars",
      "name": "ErrorBar Values",
      "description": "Error size can be set for all dimensions.",
      "anchorUrl": "/cookbook/5.0/ErrorBar#CustomErrors",
      "recipeUrl": "/cookbook/5.0/ErrorBar/CustomErrors",
      "imageUrl": "/cookbook/5.0/images/CustomErrors.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/ErrorBar.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nint points = 10;\r\n\r\nScottPlot.RandomDataGenerator gen = new();\r\n\r\ndouble[] xs = ScottPlot.Generate.Consecutive(points);\r\ndouble[] ys = ScottPlot.Generate.RandomWalk(points);\r\nvar scatter = myPlot.Add.Scatter(xs, ys);\r\nscatter.LineStyle.Width = 0;\r\n\r\nScottPlot.Plottables.ErrorBar eb = new(\r\n    xs: xs,\r\n    ys: ys,\r\n    xErrorsNegative: gen.RandomSample(points, .5),\r\n    xErrorsPositive: gen.RandomSample(points, .5),\r\n    yErrorsNegative: gen.RandomSample(points),\r\n    yErrorsPositive: gen.RandomSample(points));\r\n\r\neb.Color = scatter.Color;\r\n\r\nmyPlot.Add.Plottable(eb);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "FillY",
      "recipeClassName": "FillYFromArrays",
      "chapter": "Plot Types",
      "category": "FillY plot",
      "name": "FillY From Array Data",
      "description": "FillY plots can be created from X, Y1, and Y2 arrays.",
      "anchorUrl": "/cookbook/5.0/FillY#FillYFromArrays",
      "recipeUrl": "/cookbook/5.0/FillY/FillYFromArrays",
      "imageUrl": "/cookbook/5.0/images/FillYFromArrays.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/FillY.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nRandomDataGenerator dataGen = new(0);\r\n\r\nint count = 20;\r\ndouble[] xs = ScottPlot.Generate.Consecutive(count);\r\ndouble[] ys1 = dataGen.RandomWalk(count, offset: -5);\r\ndouble[] ys2 = dataGen.RandomWalk(count, offset: 5);\r\n\r\nvar xyy = myPlot.Add.FillY(xs, ys1, ys2);\r\nxyy.FillStyle.Color = Colors.Magenta.WithAlpha(100);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "FillY",
      "recipeClassName": "FillYFromScatters",
      "chapter": "Plot Types",
      "category": "FillY plot",
      "name": "FillY From Scatter Plots",
      "description": "FillY plots can be created from two scatter plots that share the same X values.",
      "anchorUrl": "/cookbook/5.0/FillY#FillYFromScatters",
      "recipeUrl": "/cookbook/5.0/FillY/FillYFromScatters",
      "imageUrl": "/cookbook/5.0/images/FillYFromScatters.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/FillY.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nRandomDataGenerator dataGen = new(0);\r\n\r\nint count = 20;\r\ndouble[] xs = ScottPlot.Generate.Consecutive(count);\r\ndouble[] ys1 = dataGen.RandomWalk(count, offset: -5);\r\ndouble[] ys2 = dataGen.RandomWalk(count, offset: 5);\r\n\r\nvar scatter1 = myPlot.Add.Scatter(xs, ys1);\r\nvar scatter2 = myPlot.Add.Scatter(xs, ys2);\r\n\r\nvar xyy = myPlot.Add.FillY(scatter1, scatter2);\r\nxyy.FillStyle.Color = Colors.Blue.WithAlpha(100);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "FillY",
      "recipeClassName": "Function",
      "chapter": "Plot Types",
      "category": "FillY plot",
      "name": "FillY with Custom Type",
      "description": "FillY plots can be created from data of any type if a conversion function is supplied.",
      "anchorUrl": "/cookbook/5.0/FillY#Function",
      "recipeUrl": "/cookbook/5.0/FillY/Function",
      "imageUrl": "/cookbook/5.0/images/Function.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/FillY.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\n// create source data in a nonstandard data type\r\nList\u003C(int, int, int)\u003E data = new();\r\nRandom rand = new(0);\r\nfor (int i = 0; i \u003C 10; i\u002B\u002B)\r\n{\r\n    int x = i;\r\n    int y1 = rand.Next(0, 10);\r\n    int y2 = rand.Next(20, 30);\r\n    data.Add((x, y1, y2));\r\n}\r\n\r\n// create a custom converter for the source data type\r\nstatic (double, double, double) MyConverter((int, int, int) s) =\u003E (s.Item1, s.Item2, s.Item3);\r\n\r\n// create a filled plot from source data using the custom converter\r\nmyPlot.Add.FillY(data, MyConverter);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "FillY",
      "recipeClassName": "Styling",
      "chapter": "Plot Types",
      "category": "FillY plot",
      "name": "FillY Plot Styling",
      "description": "FillY plots can be customized using public properties.",
      "anchorUrl": "/cookbook/5.0/FillY#Styling",
      "recipeUrl": "/cookbook/5.0/FillY/Styling",
      "imageUrl": "/cookbook/5.0/images/Styling.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/FillY.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nRandomDataGenerator dataGen = new(0);\r\n\r\nint count = 20;\r\ndouble[] xs = ScottPlot.Generate.Consecutive(count);\r\ndouble[] ys1 = dataGen.RandomWalk(count, offset: -5);\r\ndouble[] ys2 = dataGen.RandomWalk(count, offset: 5);\r\n\r\nvar xyy = myPlot.Add.FillY(xs, ys1, ys2);\r\nxyy.FillStyle.Color = Colors.OrangeRed.WithAlpha(100);\r\n\r\nxyy.MarkerStyle.IsVisible = true;\r\nxyy.MarkerStyle.Shape = MarkerShape.OpenSquare;\r\nxyy.MarkerStyle.Size = 8;\r\n\r\nxyy.LineStyle.AntiAlias = true;\r\nxyy.LineStyle.Color = Colors.DarkBlue;\r\nxyy.LineStyle.Pattern = LinePattern.Dot;\r\nxyy.LineStyle.Width = 2;\r\nxyy.Label = \u0022xyy\u0022;\r\n\r\nmyPlot.Legend.IsVisible = true;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Finance",
      "recipeClassName": "OHLC",
      "chapter": "Plot Types",
      "category": "Financial Plot",
      "name": "OHLC Chart",
      "description": "OHLC charts use symbols to display price data (open, high, low, and close) for specific time ranges.",
      "anchorUrl": "/cookbook/5.0/Finance#OHLC",
      "recipeUrl": "/cookbook/5.0/Finance/OHLC",
      "imageUrl": "/cookbook/5.0/images/OHLC.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nScottPlot.RandomDataGenerator gen = new(0);\r\nvar prices = gen.RandomOHLCs(30);\r\nmyPlot.Add.OHLC(prices);\r\nmyPlot.AxisStyler.DateTimeTicks(Edge.Bottom);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Finance",
      "recipeClassName": "Candlestick",
      "chapter": "Plot Types",
      "category": "Financial Plot",
      "name": "Candlestick Chart",
      "description": "Candlestick charts use symbols to display price data. The rectangle indicates open and close prices, and the center line indicates minimum and maximum price for the given time period. Color indicates whether the price increased or decreased between open and close.",
      "anchorUrl": "/cookbook/5.0/Finance#Candlestick",
      "recipeUrl": "/cookbook/5.0/Finance/Candlestick",
      "imageUrl": "/cookbook/5.0/images/Candlestick.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nScottPlot.RandomDataGenerator gen = new(0);\r\nvar prices = gen.RandomOHLCs(30);\r\nmyPlot.Add.Candlestick(prices);\r\nmyPlot.AxisStyler.DateTimeTicks(Edge.Bottom);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Polygon",
      "recipeClassName": "PolygonQuickstart",
      "chapter": "Plot Types",
      "category": "Polygon Plot",
      "name": "Polygon Plot Quickstart",
      "description": "Polygon plots can be added from a series of vertices, and must be in clockwise order.",
      "anchorUrl": "/cookbook/5.0/Polygon#PolygonQuickstart",
      "recipeUrl": "/cookbook/5.0/Polygon/PolygonQuickstart",
      "imageUrl": "/cookbook/5.0/images/PolygonQuickstart.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Polygon.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nCoordinates[] vertices = new Coordinates[]\r\n{\r\n    new Coordinates(0,   0.25),\r\n    new Coordinates(0.3, 0.75),\r\n    new Coordinates(1,   1),\r\n    new Coordinates(0.7, 0.5),\r\n    new Coordinates(1,   0)\r\n};\r\nmyPlot.Add.Polygon(vertices);\r\nmyPlot.AutoScale();\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Polygon",
      "recipeClassName": "PolygonStyling",
      "chapter": "Plot Types",
      "category": "Polygon Plot",
      "name": "Polygon Plot Styling",
      "description": "Polygon plots can be fully customized.",
      "anchorUrl": "/cookbook/5.0/Polygon#PolygonStyling",
      "recipeUrl": "/cookbook/5.0/Polygon/PolygonStyling",
      "imageUrl": "/cookbook/5.0/images/PolygonStyling.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Polygon.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nCoordinates[] vertices = new Coordinates[]\r\n{\r\n    new Coordinates(0,   0.25),\r\n    new Coordinates(0.3, 0.75),\r\n    new Coordinates(1,   1),\r\n    new Coordinates(0.7, 0.5),\r\n    new Coordinates(1,   0)\r\n};\r\nvar poly = myPlot.Add.Polygon(vertices);\r\npoly.FillStyle = new FillStyle\r\n{\r\n    Color = Colors.IndianRed\r\n};\r\npoly.LineStyle = new LineStyle\r\n{\r\n    AntiAlias = true,\r\n    Color = Colors.Black,\r\n    Pattern = LinePattern.Dash,\r\n    Width = 2\r\n};\r\npoly.MarkerStyle = new MarkerStyle(MarkerShape.OpenCircle, 8);\r\npoly.MarkerStyle.Fill.Color = Colors.Gold;\r\npoly.MarkerStyle.Outline.Color = Colors.Brown;\r\nmyPlot.AutoScale();\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Signal",
      "recipeClassName": "Offset",
      "chapter": "Plot Types",
      "category": "Signal Plot",
      "name": "Offset",
      "description": "Signal plots can be offset by a given X and Y value.",
      "anchorUrl": "/cookbook/5.0/Signal#Offset",
      "recipeUrl": "/cookbook/5.0/Signal/Offset",
      "imageUrl": "/cookbook/5.0/images/Offset.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\ndouble[] values = ScottPlot.Generate.Sin(51);\r\n\r\nvar sig1 = myPlot.Add.Signal(values);\r\nsig1.Label = \u0022Default\u0022;\r\n\r\nvar sig2 = myPlot.Add.Signal(values);\r\nsig2.Data.XOffset = 10;\r\nsig2.Data.YOffset = .25;\r\nsig2.Label = \u0022Offset\u0022;\r\n\r\nmyPlot.Legend.IsVisible = true;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Text",
      "recipeClassName": "TextQuickstart",
      "chapter": "Plot Types",
      "category": "Text",
      "name": "Text Quickstart",
      "description": "Text can be placed anywhere in coordinate space.",
      "anchorUrl": "/cookbook/5.0/Text#TextQuickstart",
      "recipeUrl": "/cookbook/5.0/Text/TextQuickstart",
      "imageUrl": "/cookbook/5.0/images/TextQuickstart.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Text.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.Add.Signal(ScottPlot.Generate.Sin());\r\nmyPlot.Add.Signal(ScottPlot.Generate.Cos());\r\nmyPlot.Add.Text(\u0022Hello, World\u0022, 25, 0.5);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Text",
      "recipeClassName": "Formatting",
      "chapter": "Plot Types",
      "category": "Text",
      "name": "Text Formatting",
      "description": "Text formatting can be extensively customized.",
      "anchorUrl": "/cookbook/5.0/Text#Formatting",
      "recipeUrl": "/cookbook/5.0/Text/Formatting",
      "imageUrl": "/cookbook/5.0/images/Formatting.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Text.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nvar text = myPlot.Add.Text(\u0022Hello, World\u0022, 42, 69);\r\ntext.Label.FontSize = 26;\r\ntext.Label.Bold = true;\r\ntext.Label.Rotation = -45;\r\ntext.Label.ForeColor = Colors.Yellow;\r\ntext.Label.BackColor = Colors.Navy.WithAlpha(.5);\r\ntext.Label.BorderColor = Colors.Magenta;\r\ntext.Label.BorderWidth = 3;\r\ntext.Label.Padding = 10;\r\ntext.Label.Alignment = Alignment.MiddleCenter;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Regression",
      "recipeClassName": "Linear",
      "chapter": "Statistics",
      "category": "Regression",
      "name": "LinearRegression",
      "description": "Fit a line to a collection of X/Y data points.",
      "anchorUrl": "/cookbook/5.0/Regression#Linear",
      "recipeUrl": "/cookbook/5.0/Regression/Linear",
      "imageUrl": "/cookbook/5.0/images/Linear.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Statistics/Regression.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\ndouble[] xs = new double[] { 1, 2, 3, 4, 5, 6, 7 };\r\ndouble[] ys = new double[] { 2, 2, 3, 3, 3.8, 4.2, 4 };\r\n\r\n// plot original data as a scatter plot\r\nvar sp = myPlot.Add.Scatter(xs, ys);\r\nsp.LineStyle = LineStyle.None;\r\nsp.MarkerStyle.Size = 10;\r\n\r\n// calculate the regression line\r\nScottPlot.Statistics.LinearRegression reg = new(xs, ys);\r\n\r\n// plot the regression line\r\nCoordinates pt1 = new(xs.First(), reg.GetValue(xs.First()));\r\nCoordinates pt2 = new(xs.Last(), reg.GetValue(xs.Last()));\r\nvar line = myPlot.Add.Line(pt1, pt2);\r\nline.MarkerStyle = MarkerStyle.None;\r\nline.LineStyle.Pattern = LinePattern.Dash;\r\nline.LineStyle.Width = 2;\r\n\r\n// note the formula at the top of the plot\r\nmyPlot.Title($\u0022y = {reg.Slope:0.###}x \u002B {reg.Offset:0.###} (r\u00B2={reg.Rsquared:0.###})\u0022);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "AxisLabels",
      "chapter": "Introduction",
      "category": "Axis and Ticks",
      "name": "Adding Axis Labels",
      "description": "Axis labels are the text labels centered on each axis. The text inside these labels can be changed, and the style of the text can be extensively customized.",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#AxisLabels",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/AxisLabels",
      "imageUrl": "/cookbook/5.0/images/AxisLabels.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/AxisAndTicks.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.Add.Signal(ScottPlot.Generate.Sin(51));\r\nmyPlot.Add.Signal(ScottPlot.Generate.Cos(51));\r\n\r\nmyPlot.XAxis.Label.Text = \u0022Horizontal Axis\u0022;\r\nmyPlot.YAxis.Label.Text = \u0022Vertical Axis\u0022;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "SetAxisLimits",
      "chapter": "Introduction",
      "category": "Axis and Ticks",
      "name": "Manually Set Axis Limits",
      "description": "Axis Limits can be set manually in different ways.",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#SetAxisLimits",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/SetAxisLimits",
      "imageUrl": "/cookbook/5.0/images/SetAxisLimits.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/AxisAndTicks.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.Add.Signal(ScottPlot.Generate.Sin(51));\r\nmyPlot.Add.Signal(ScottPlot.Generate.Cos(51));\r\n\r\n// Interact with a specific axis\r\nmyPlot.XAxis.Min = -100;\r\nmyPlot.XAxis.Max = 150;\r\nmyPlot.YAxis.Min = -5;\r\nmyPlot.YAxis.Max = 5;\r\n\r\n// Call a helper function\r\nmyPlot.SetAxisLimits(-100, 150, -5, 5);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "GetAxisLimits",
      "chapter": "Introduction",
      "category": "Axis and Ticks",
      "name": "Read Axis Limits",
      "description": "The current axis limits can be read in multiple ways.",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#GetAxisLimits",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/GetAxisLimits",
      "imageUrl": "/cookbook/5.0/images/GetAxisLimits.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/AxisAndTicks.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.Add.Signal(ScottPlot.Generate.Sin(51));\r\nmyPlot.Add.Signal(ScottPlot.Generate.Cos(51));\r\n\r\n// Interact with a specific axis\r\ndouble top = myPlot.YAxis.Max;\r\ndouble bottom = myPlot.YAxis.Min;\r\n\r\n// Call a helper function\r\nAxisLimits limits = myPlot.GetAxisLimits();\r\ndouble left = limits.Rect.Left;\r\ndouble center = limits.Rect.HorizontalCenter;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "AutoScale",
      "chapter": "Introduction",
      "category": "Axis and Ticks",
      "name": "Zoom to Fit Data",
      "description": "The axis limits can be automatically adjusted to fit the data. Optional arguments allow users to define the amount of whitespace around the edges of the data.",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#AutoScale",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/AutoScale",
      "imageUrl": "/cookbook/5.0/images/AutoScale.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/AxisAndTicks.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.Add.Signal(ScottPlot.Generate.Sin(51));\r\nmyPlot.Add.Signal(ScottPlot.Generate.Cos(51));\r\n\r\n// set limits that do not fit the data\r\nmyPlot.SetAxisLimits(-100, 150, -5, 5);\r\n\r\n// reset limits to fit the data\r\nmyPlot.AutoScale();\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "Frameless",
      "chapter": "Introduction",
      "category": "Axis and Ticks",
      "name": "Frameless Plot",
      "description": "How to create a plot containig only the data area and no axes.",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#Frameless",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/Frameless",
      "imageUrl": "/cookbook/5.0/images/Frameless.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/AxisAndTicks.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.FigureBackground = Colors.Magenta; // should not be seen\r\nmyPlot.DataBackground = Colors.WhiteSmoke;\r\n\r\nmyPlot.Add.Signal(ScottPlot.Generate.Sin(51));\r\nmyPlot.Add.Signal(ScottPlot.Generate.Cos(51));\r\n\r\nmyPlot.XAxes.ForEach(x =\u003E x.IsVisible = false);\r\nmyPlot.YAxes.ForEach(x =\u003E x.IsVisible = false);\r\nmyPlot.TitlePanel.IsVisible = false;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Legend",
      "recipeClassName": "LegendStyle",
      "chapter": "Introduction",
      "category": "Configuring Legends",
      "name": "Legend Customization",
      "description": "The default legend can be easily accessed and customized. It is possible to add multiple legends, including custom ones implementing ILegend.",
      "anchorUrl": "/cookbook/5.0/Legend#LegendStyle",
      "recipeUrl": "/cookbook/5.0/Legend/LegendStyle",
      "imageUrl": "/cookbook/5.0/images/LegendStyle.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Legend.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nvar sig1 = myPlot.Add.Signal(ScottPlot.Generate.Sin(51));\r\nsig1.Label = \u0022Sin\u0022;\r\n\r\nvar sig2 = myPlot.Add.Signal(ScottPlot.Generate.Cos(51));\r\nsig2.Label = \u0022Cos\u0022;\r\n\r\nmyPlot.Legend.IsVisible = true;\r\nmyPlot.Legend.OutlineStyle.Color = Colors.Navy;\r\nmyPlot.Legend.OutlineStyle.Width = 2;\r\nmyPlot.Legend.BackgroundFill.Color = Colors.LightBlue;\r\nmyPlot.Legend.ShadowFill.Color = Colors.Blue.WithOpacity(.5);\r\nmyPlot.Legend.Font.Size = 16;\r\nmyPlot.Legend.Font.Name = Fonts.Serif;\r\nmyPlot.Legend.Alignment = Alignment.UpperCenter;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Legend",
      "recipeClassName": "ManualLegend",
      "chapter": "Introduction",
      "category": "Configuring Legends",
      "name": "Manual Legend",
      "description": "Legends may be constructed manually.",
      "anchorUrl": "/cookbook/5.0/Legend#ManualLegend",
      "recipeUrl": "/cookbook/5.0/Legend/ManualLegend",
      "imageUrl": "/cookbook/5.0/images/ManualLegend.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Legend.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.Add.Signal(ScottPlot.Generate.Sin(51));\r\nmyPlot.Add.Signal(ScottPlot.Generate.Cos(51));\r\n\r\nmyPlot.Legend.IsVisible = true;\r\n\r\nmyPlot.Legend.ManualItems.Add(new LegendItem()\r\n{\r\n    LineColor = Colors.Magenta,\r\n    LineWidth = 2,\r\n    Label = \u0022Alpha\u0022\r\n});\r\n\r\nmyPlot.Legend.ManualItems.Add(new LegendItem()\r\n{\r\n    LineColor = Colors.Green,\r\n    LineWidth = 4,\r\n    Label = \u0022Beta\u0022\r\n});\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Styling",
      "recipeClassName": "StyleClass",
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Style Helper Functions",
      "description": "Plots contain many objects which can be customized individually by assigining to their public properties, but helper methods exist in the Plot\u0027s Style object that make it easier to customzie many items at once using a simpler API.",
      "anchorUrl": "/cookbook/5.0/Styling#StyleClass",
      "recipeUrl": "/cookbook/5.0/Styling/StyleClass",
      "imageUrl": "/cookbook/5.0/images/StyleClass.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.Add.Signal(ScottPlot.Generate.Sin(51));\r\nmyPlot.Add.Signal(ScottPlot.Generate.Cos(51));\r\n\r\n// visible items have public properties that can be customized\r\nmyPlot.XAxis.Label.Text = \u0022Horizontal Axis\u0022;\r\nmyPlot.YAxis.Label.Text = \u0022Vertical Axis\u0022;\r\nmyPlot.TitlePanel.Label.Text = \u0022Plot Title\u0022;\r\n\r\n// the Style object contains helper methods to easily style many items at once\r\nmyPlot.Style.Background(figure: Color.FromHex(\u0022#07263b\u0022), data: Color.FromHex(\u0022#0b3049\u0022));\r\nmyPlot.Style.ColorAxes(Color.FromHex(\u0022#a0acb5\u0022));\r\nmyPlot.Style.ColorGrids(Color.FromHex(\u0022#0e3d54\u0022));\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Styling",
      "recipeClassName": "AxisCustom",
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Axis Customization",
      "description": "Axis labels, tick marks, and frame can all be customized.",
      "anchorUrl": "/cookbook/5.0/Styling#AxisCustom",
      "recipeUrl": "/cookbook/5.0/Styling/AxisCustom",
      "imageUrl": "/cookbook/5.0/images/AxisCustom.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.Add.Signal(ScottPlot.Generate.Sin(51));\r\nmyPlot.Add.Signal(ScottPlot.Generate.Cos(51));\r\n\r\nmyPlot.TitlePanel.Label.Text = \u0022Plot Title\u0022;\r\nmyPlot.TitlePanel.Label.Font.Color = Colors.RebeccaPurple;\r\nmyPlot.TitlePanel.Label.Font.Size = 32;\r\nmyPlot.TitlePanel.Label.Font.Name = Fonts.Serif;\r\nmyPlot.TitlePanel.Label.Rotation = -5;\r\nmyPlot.TitlePanel.Label.Font.Bold = false;\r\n\r\nmyPlot.YAxis.Label.Text = \u0022Vertical Axis\u0022;\r\nmyPlot.YAxis.Label.Font.Color = Colors.Magenta;\r\nmyPlot.YAxis.Label.Font.Italic = true;\r\n\r\nmyPlot.XAxis.Label.Text = \u0022Horizontal Axis\u0022;\r\nmyPlot.XAxis.Label.Font.Bold = false;\r\nmyPlot.XAxis.Label.Font.Name = Fonts.Monospace;\r\n\r\nmyPlot.XAxis.MajorTickLength = 10;\r\nmyPlot.XAxis.MajorTickWidth = 3;\r\nmyPlot.XAxis.MajorTickColor = Colors.Magenta;\r\nmyPlot.XAxis.MinorTickLength = 5;\r\nmyPlot.XAxis.MinorTickWidth = 0.5f;\r\nmyPlot.XAxis.MinorTickColor = Colors.Green;\r\nmyPlot.XAxis.FrameLineStyle.Color = Colors.LightBlue;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Styling",
      "recipeClassName": "GridCustom",
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Grid Customization",
      "description": "Grid lines can be customized. Custom grid systems can be created to give developers full control of grid rendering, but the default grid can be interacted with to customize its appearance.",
      "anchorUrl": "/cookbook/5.0/Styling#GridCustom",
      "recipeUrl": "/cookbook/5.0/Styling/GridCustom",
      "imageUrl": "/cookbook/5.0/images/GridCustom.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.Add.Signal(ScottPlot.Generate.Sin(51));\r\nmyPlot.Add.Signal(ScottPlot.Generate.Cos(51));\r\n\r\nScottPlot.Grids.DefaultGrid grid = myPlot.GetDefaultGrid();\r\n\r\ngrid.MajorLineStyle.Color = Colors.Green.WithOpacity(.5);\r\ngrid.MinorLineStyle.Color = Colors.Green.WithOpacity(.1);\r\ngrid.MinorLineStyle.Width = 1;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Styling",
      "recipeClassName": "GridAbove",
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Grid Above Data",
      "description": "Grid lines are typically drawn beneath data, but grids can be configured to render on top of plottables too.",
      "anchorUrl": "/cookbook/5.0/Styling#GridAbove",
      "recipeUrl": "/cookbook/5.0/Styling/GridAbove",
      "imageUrl": "/cookbook/5.0/images/GridAbove.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nvar sig = myPlot.Add.Signal(ScottPlot.Generate.Sin(51));\r\nsig.LineStyle.Width = 10;\r\n\r\nScottPlot.Grids.DefaultGrid grid = myPlot.GetDefaultGrid();\r\ngrid.MajorLineStyle.Width = 3;\r\ngrid.MajorLineStyle.Color = Colors.WhiteSmoke;\r\ngrid.IsBeneathPlottables = false;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Styling",
      "recipeClassName": "Palette",
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Palettes",
      "description": "A palette is a set of colors, and the Plot\u0027s palette defines the default colors to use when adding new plottables. ScottPlot comes with many standard palettes, but users may also create their own.",
      "anchorUrl": "/cookbook/5.0/Styling#Palette",
      "recipeUrl": "/cookbook/5.0/Styling/Palette",
      "imageUrl": "/cookbook/5.0/images/Palette.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.Palette = new ScottPlot.Palettes.Nord();\r\n\r\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\r\n{\r\n    double[] data = ScottPlot.Generate.Sin(100, phase: -i / 20.0f);\r\n    var sig = myPlot.Add.Signal(data);\r\n    sig.LineStyle.Width = 3;\r\n}\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Styling",
      "recipeClassName": "Markers",
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Markers",
      "description": "Many plot types have a MarkerStyle which can be customized.",
      "anchorUrl": "/cookbook/5.0/Styling#Markers",
      "recipeUrl": "/cookbook/5.0/Styling/Markers",
      "imageUrl": "/cookbook/5.0/images/Markers.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nint count = 21;\r\ndouble[] xs = ScottPlot.Generate.Consecutive(count);\r\ndouble[] ys = ScottPlot.Generate.Sin(count);\r\n\r\nMarkerShape[] markerShapes = Enum.GetValues\u003CMarkerShape\u003E().ToArray();\r\n\r\nfor (int i = 0; i \u003C markerShapes.Length; i\u002B\u002B)\r\n{\r\n    double[] data = ys.Select(y =\u003E markerShapes.Length - y \u002B i).ToArray();\r\n\r\n    var scatter = myPlot.Add.Scatter(xs, data);\r\n\r\n    scatter.Label = markerShapes[i].ToString();\r\n\r\n    scatter.MarkerStyle = new MarkerStyle(\r\n        shape: markerShapes[i],\r\n        size: 10,\r\n        color: scatter.LineStyle.Color);\r\n}\r\n\r\nmyPlot.Legend.IsVisible = true;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Styling",
      "recipeClassName": "LineStyles",
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Line Styles",
      "description": "Many plot types have a LineStyle which can be customized.",
      "anchorUrl": "/cookbook/5.0/Styling#LineStyles",
      "recipeUrl": "/cookbook/5.0/Styling/LineStyles",
      "imageUrl": "/cookbook/5.0/images/LineStyles.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nint count = 21;\r\ndouble[] xs = ScottPlot.Generate.Consecutive(count);\r\ndouble[] ys = ScottPlot.Generate.Sin(count);\r\n\r\nLinePattern[] linePatterns = Enum.GetValues\u003CLinePattern\u003E().ToArray();\r\n\r\nfor (int i = 0; i \u003C linePatterns.Length; i\u002B\u002B)\r\n{\r\n    double[] data = ys.Select(y =\u003E linePatterns.Length - y \u002B i).ToArray();\r\n\r\n    var scatter = myPlot.Add.Scatter(xs, data);\r\n\r\n    scatter.Label = linePatterns[i].ToString();\r\n    scatter.LineStyle.Width = 2;\r\n    scatter.LineStyle.Pattern = linePatterns[i];\r\n    scatter.MarkerStyle = MarkerStyle.None;\r\n}\r\n\r\nmyPlot.Legend.IsVisible = true;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "Styling",
      "recipeClassName": "Scaling",
      "chapter": "Introduction",
      "category": "Styling Plots",
      "name": "Scaling",
      "description": "All components of an image can be scaled up or down in size by adjusting the ScaleFactor property. This is very useful for creating images that look nice on high DPI displays with display scaling enabled.",
      "anchorUrl": "/cookbook/5.0/Styling#Scaling",
      "recipeUrl": "/cookbook/5.0/Styling/Scaling",
      "imageUrl": "/cookbook/5.0/images/Scaling.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Introduction/Styling.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.ScaleFactor = 2;\r\nmyPlot.Add.Signal(ScottPlot.Generate.Sin());\r\nmyPlot.Add.Signal(ScottPlot.Generate.Cos());\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "CustomTickFormatter",
      "chapter": "Axis",
      "category": "Customizing Ticks",
      "name": "Custom Tick Formatters",
      "description": "Users can customize the logic used to create tick labels from tick positions.",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#CustomTickFormatter",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/CustomTickFormatter",
      "imageUrl": "/cookbook/5.0/images/CustomTickFormatter.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingTicks.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\ndouble[] xs = ScottPlot.Generate.Consecutive(100, 1, -50);\r\nmyPlot.Add.Scatter(xs, ScottPlot.Generate.Sin(100));\r\nmyPlot.Add.Scatter(xs, ScottPlot.Generate.Cos(100));\r\n\r\n// create a static function containing the string formatting logic\r\nstatic string CustomFormatter(double position)\r\n{\r\n    if (position == 0)\r\n        return \u00220\u0022;\r\n    else if (position \u003E 0)\r\n        return $\u0022\u002B{position}\u0022;\r\n    else\r\n        return $\u0022({-position})\u0022;\r\n}\r\n\r\n// create a custom tick generator using your custom label formatter\r\nScottPlot.TickGenerators.NumericAutomatic myTickGenerator = new()\r\n{\r\n    LabelFormatter = CustomFormatter\r\n};\r\n\r\n// tell an axis to use the custom tick generator\r\nmyPlot.XAxis.TickGenerator = myTickGenerator;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "AltTickGen",
      "chapter": "Axis",
      "category": "Customizing Ticks",
      "name": "Custom Tick Generators",
      "description": "Tick generators determine where ticks are to be placed and also contain logic for generating tick labels from tick positions. Alternative tick generators can be created and assigned to axes. Some common tick generators are provided with ScottPlot, and users also have the option create their own.",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#AltTickGen",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/AltTickGen",
      "imageUrl": "/cookbook/5.0/images/AltTickGen.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/CustomizingTicks.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\nmyPlot.Add.Signal(ScottPlot.Generate.Sin(51));\r\nmyPlot.Add.Signal(ScottPlot.Generate.Cos(51));\r\n\r\nmyPlot.XAxis.TickGenerator = new ScottPlot.TickGenerators.NumericFixedInterval(11);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "DateTimeAxes",
      "recipeClassName": "DateTimeAxisQuickstart",
      "chapter": "Axis",
      "category": "DateTime Axes",
      "name": "DateTime Axis Quickstart",
      "description": "Axis tick labels can be displayed using a time format.",
      "anchorUrl": "/cookbook/5.0/DateTimeAxes#DateTimeAxisQuickstart",
      "recipeUrl": "/cookbook/5.0/DateTimeAxes/DateTimeAxisQuickstart",
      "imageUrl": "/cookbook/5.0/images/DateTimeAxisQuickstart.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/DateTimeAxes.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\n// begin with an array of DateTime values\r\nDateTime[] dates = ScottPlot.Generate.DateTime.Days(100);\r\n\r\n// convert DateTime to OLE Automation (OADate) format\r\ndouble[] xs = dates.Select(x =\u003E x.ToOADate()).ToArray();\r\ndouble[] ys = ScottPlot.Generate.RandomWalk(xs.Length);\r\nmyPlot.Add.Scatter(xs, ys);\r\n\r\n// tell the plot to display dates on the bottom axis\r\nmyPlot.AxisStyler.DateTimeTicks(Edge.Bottom);\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    },
    {
      "categoryClassName": "MultiAxis",
      "recipeClassName": "MultiAxisQuickstart",
      "chapter": "Axis",
      "category": "Advanced Axis Features",
      "name": "Multi-Axis",
      "description": "Additional axes may be added to plots. Plottables are displayed using the coordinate system of the primary axes by default, but any plottable can be displayed using any X and Y axis.",
      "anchorUrl": "/cookbook/5.0/MultiAxis#MultiAxisQuickstart",
      "recipeUrl": "/cookbook/5.0/MultiAxis/MultiAxisQuickstart",
      "imageUrl": "/cookbook/5.0/images/MultiAxisQuickstart.png",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Axis/MultiAxis.cs",
      "source": "ScottPlot.Plot myPlot = new();\r\n\r\n// plottables use the standard X and Y axes by default\r\nvar sig1 = myPlot.Add.Signal(ScottPlot.Generate.Sin(51, mult: 0.01));\r\nsig1.Axes.XAxis = myPlot.XAxis; // standard X axis\r\nsig1.Axes.YAxis = myPlot.YAxis; // standard Y axis\r\nmyPlot.YAxis.Label.Text = \u0022Primary Y Axis\u0022;\r\n\r\n// create a second axis and add it to the plot\r\nScottPlot.AxisPanels.LeftAxis yAxis2 = new();\r\nmyPlot.YAxes.Add(yAxis2);\r\n\r\n// add a new plottable and tell it to use the custom Y axis\r\nvar sig2 = myPlot.Add.Signal(ScottPlot.Generate.Cos(51, mult: 100));\r\nsig2.Axes.XAxis = myPlot.XAxis; // standard X axis\r\nsig2.Axes.YAxis = yAxis2; // custom Y axis\r\nyAxis2.Label.Text = \u0022Secondary Y Axis\u0022;\r\n\r\nmyPlot.SavePng(\u0022demo.png\u0022);\r\n"
    }
  ]
}